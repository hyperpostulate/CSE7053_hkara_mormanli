//Nodes
MATCH (n)
RETURN n.uID as uID,
n.centrality as centrality,
n.ustdepartmanName as ustdepartmanName,
n.name as name,
n.departmanName as departmanName,
n.isManager as isManager,
n.departmanID as departmanID,
n.managerID as managerID,
n.ustdepartmanID as ustdepartmanID,
n.isActive as isActive
ORDER BY n.uID;

//TAKDIR relation
MATCH (n)-[r:TAKDIR]->(m) RETURN n.uID as takdir_eden, m.uID as takdir_edilen

//TESEKKUR relation
MATCH (n)-[r:TESEKKUR]->(m) RETURN n.uID as tesekkur_eden, m.uID as tesekkur_edilen

//DOGUMGUNU relation
MATCH (n)-[r:DOGUMGUNU]->(m) RETURN n.uID as dogumgunu_kutlayan, m.uID as dogumgunu_kutlanan

//Degree Centrality
match (n)-[r:TAKDIR]->(m)  
return m.name, count(r) as DegreeScore,
order by DegreeScore desc;
 
//Betweenness centrality for TAKDIR
CALL algo.betweenness.stream('*', 'TAKDIR',
{direction:'in',concurrency:1})
YIELD nodeId, centrality
RETURN nodeId, centrality as betweenness_centrality order by nodeId

//Closeness centrality for TAKDIR
CALL algo.closeness.stream('*', 'TAKDIR',
{direction:'in',concurrency:1})
YIELD nodeId, centrality
RETURN nodeId, centrality as closeness_centrality order by nodeId

//Betweenness centrality for TESEKKUR
CALL algo.betweenness.stream('*', 'TESEKKUR',
{direction:'in',concurrency:1})
YIELD nodeId, centrality
RETURN nodeId, centrality as betweenness_centrality order by nodeId

//Closeness centrality for TESEKKUR
CALL algo.closeness.stream('*', 'TESEKKUR',
{direction:'in',concurrency:1})
YIELD nodeId, centrality
RETURN nodeId, centrality as closeness_centrality order by nodeId

//Betweenness centrality for DOGUMGUNU
CALL algo.betweenness.stream('*', 'DOGUMGUNU',
{direction:'in',concurrency:1})
YIELD nodeId, centrality
RETURN nodeId, centrality as betweenness_centrality order by nodeId

//Closeness centrality for DOGUMGUNU
CALL algo.closeness.stream('*', 'DOGUMGUNU',
{direction:'in',concurrency:1})
YIELD nodeId, centrality
RETURN nodeId, centrality as closeness_centrality order by nodeId

